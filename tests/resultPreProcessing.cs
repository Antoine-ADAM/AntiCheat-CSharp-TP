﻿namespace Steganography{public class Utils{ static public Dictionary<int[] , int> QuantizationTable = new Dictionary<int[], int>(){{ new int[] {0, 1}, 1},{ new int[] {2, 32}, 2},{ new int[] {33, 64}, 3},{ new int[] {65, 255}, 4}}; public static int[] TextToBin(string secret){int[] res = new int[secret.Length * 8];int k = 0;foreach (char v in secret){int com = 128;for (int i = 0;i < 8;i++){res[k] = (v & com)==0 ? 0 : 1;com >>= 1;k++;}}return res;}public static string BinToText(int[] bin){int lenBin = bin.Length;string res = "";for (int i = 0;i < lenBin;i+=8){int v = 0;for (int j = 0;j < 8;j++){v <<= 1;v += bin[i + j];}res += (char) v;}return res;} public static int ExtractBits(int[] secret, int index, int nbBits){int res = 0;int lenSecret = secret.Length;int max = nbBits + index;for (int i = index;i < max;i++){res <<= 1;res += i >= lenSecret ? 0 : secret[i];}return res;} public static void InsertBits(int[] secret, int index, int nbBits, int value){int lenSecret = secret.Length;int max = nbBits;if (max + index > lenSecret)max -= max + index - lenSecret;int del = 1 << nbBits;for (int i = 0;i < max;i++){del >>= 1;secret[i + index] = (value & del) == 0 ? 0 : 1;}} public static int GetDifference(Color pixel1, Color pixel2){return pixel1.R < pixel2.R ? pixel2.R - pixel1.R : pixel1.R - pixel2.R;} public static Bitmap OpenImage(string path){return new Bitmap(path);} public static void SaveImage(string name, Bitmap image){image.Save(name);image.Dispose();} public static int ClearLSB(int color, int nbBits){if (color <= 0)return color;color >>= nbBits;color <<= nbBits;return color;} public static int ReplaceLSB(int color, int nbBits, int newLSB){color = ClearLSB(color, nbBits);return color + newLSB;} public static int SaveLSB(int color, int nbBits){if (color <= 0)return color;color <<= 8 - nbBits;color %= 256;color >>= 8 - nbBits;return color;}}} 